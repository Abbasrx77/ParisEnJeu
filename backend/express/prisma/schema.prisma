generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model badges {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(100)
  description String?
  icon_url    String?       @db.VarChar(255)
  user_badges user_badges[]
}

model notifications {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  message    String
  is_read    Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model reports {
  id             Int                                  @id @default(autoincrement())
  user_id        Int?
  location       Unsupported("geometry(Point,4326)")?
  category       String                               @db.VarChar(50)
  status         report_status?                       @default(en_attente)
  description    String?
  photo_urls     String[]
  created_at     DateTime?                            @default(now()) @db.Timestamp(6)
  arrondissement Int?
  users          users?                               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([location], type: Gist)
}

model user_badges {
  user_id   Int
  badge_id  Int
  earned_at DateTime? @default(now()) @db.Timestamp(6)
  badges    badges    @relation(fields: [badge_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, badge_id])
}

model users {
  id            Int             @id @default(autoincrement())
  nom           String          @db.VarChar(50)
  prenom        String          @db.VarChar(50)
  email         String          @unique @db.VarChar(255)
  password_hash String          @db.VarChar(255)
  salt          String          @db.VarChar(255)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  role          user_role?      @default(user)
  notifications notifications[]
  reports       reports[]
  user_badges   user_badges[]
  tokens        ActiveToken[]
}

model ActiveToken {
  id        Int      @id @default(autoincrement()) @map("_id")
  token     String   @unique @db.VarChar(255)
  user_id   Int
  expiresAt DateTime @db.Date
  createdAt DateTime @default(now()) @db.Date
  users     users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum report_status {
  en_attente
  en_cours
  resolu
}

enum user_role {
  user
  admin
}
